generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//DEFAULT NEXTAUTH MODELS

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Pago          Pago[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//CUSTOM MODELS

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  image       String
  curso       Curso[]
  cursoId     String?
}

model Curso {
  id          String   @id @default(cuid())
  name        String
  content     String
  horas       Int
  certificado String
  target      String
  image       String
  state       Boolean
  modulos     Modulo[]
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
}

model Modulo {
  id          String @id @default(cuid())
  description String
  price       Int
  link        String
  Curso       Curso  @relation(fields: [cursoId], references: [id], onDelete: Cascade)
  cursoId     String
  Pago        Pago[]
}

model Pago {
  id            String   @id @default(cuid())
  userId        String
  moduleid      String
  date          DateTime @default(now())
  amount        Int
  description   String
  status        String
  paymentMethod String
  paymentidprov String
  User          User     @relation(fields: [userId], references: [id])
  Module        Modulo[]
}
